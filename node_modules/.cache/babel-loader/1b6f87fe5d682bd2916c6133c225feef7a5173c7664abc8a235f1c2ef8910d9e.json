{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonch\\\\OneDrive\\\\Desktop\\\\deseosdedos\\\\src\\\\context\\\\AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [wishes, setWishes] = useState([]);\n  const [reminders, setReminders] = useState([]);\n  const [userLists, setUserLists] = useState([]);\n  useEffect(() => {\n    loadWishes();\n    loadReminders();\n    loadUserLists();\n  }, []);\n  const loadWishes = useCallback(() => {\n    const storedWishes = JSON.parse(localStorage.getItem('wishes') || '[]');\n    setWishes(storedWishes);\n  }, []);\n  const addWish = useCallback(newWish => {\n    const updatedWishes = [...wishes, {\n      ...newWish,\n      id: Date.now()\n    }];\n    setWishes(updatedWishes);\n    localStorage.setItem('wishes', JSON.stringify(updatedWishes));\n  }, [wishes]);\n  const loadReminders = useCallback(() => {\n    const storedReminders = JSON.parse(localStorage.getItem('reminders') || '[]');\n    setReminders(storedReminders);\n  }, []);\n  const addReminder = useCallback(newReminder => {\n    const updatedReminders = [...reminders, {\n      ...newReminder,\n      id: Date.now(),\n      fulfilled: false\n    }];\n    setReminders(updatedReminders);\n    localStorage.setItem('reminders', JSON.stringify(updatedReminders));\n  }, [reminders]);\n  const fulfillReminder = useCallback(id => {\n    const updatedReminders = reminders.map(reminder => reminder.id === id ? {\n      ...reminder,\n      fulfilled: true\n    } : reminder);\n    setReminders(updatedReminders);\n    localStorage.setItem('reminders', JSON.stringify(updatedReminders));\n  }, [reminders]);\n  const deleteReminder = useCallback(id => {\n    const updatedReminders = reminders.filter(reminder => reminder.id !== id);\n    setReminders(updatedReminders);\n    localStorage.setItem('reminders', JSON.stringify(updatedReminders));\n  }, [reminders]);\n  const loadUserLists = useCallback(() => {\n    const storedLists = JSON.parse(localStorage.getItem('userLists') || '[]');\n    setUserLists(storedLists);\n  }, []);\n  const addUserList = useCallback(newList => {\n    const updatedLists = [...userLists, {\n      ...newList,\n      id: Date.now()\n    }];\n    setUserLists(updatedLists);\n    localStorage.setItem('userLists', JSON.stringify(updatedLists));\n  }, [userLists]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      wishes,\n      loadWishes,\n      addWish,\n      reminders,\n      loadReminders,\n      addReminder,\n      fulfillReminder,\n      deleteReminder,\n      userLists,\n      loadUserLists,\n      addUserList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"jwUsaD+5wT+X7Qin31B2EQNWky8=\");\n_c = AppProvider;\nexport const useApp = () => {\n  _s2();\n  return useContext(AppContext);\n};\n_s2(useApp, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","wishes","setWishes","reminders","setReminders","userLists","setUserLists","loadWishes","loadReminders","loadUserLists","storedWishes","JSON","parse","localStorage","getItem","addWish","newWish","updatedWishes","id","Date","now","setItem","stringify","storedReminders","addReminder","newReminder","updatedReminders","fulfilled","fulfillReminder","map","reminder","deleteReminder","filter","storedLists","addUserList","newList","updatedLists","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","$RefreshReg$"],"sources":["C:/Users/gonch/OneDrive/Desktop/deseosdedos/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nconst AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n    const [wishes, setWishes] = useState([]);\r\n    const [reminders, setReminders] = useState([]);\r\n    const [userLists, setUserLists] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadWishes();\r\n        loadReminders();\r\n        loadUserLists();\r\n    }, []);\r\n\r\n    const loadWishes = useCallback(() => {\r\n        const storedWishes = JSON.parse(localStorage.getItem('wishes') || '[]');\r\n        setWishes(storedWishes);\r\n    }, []);\r\n\r\n    const addWish = useCallback((newWish) => {\r\n        const updatedWishes = [...wishes, { ...newWish, id: Date.now() }];\r\n        setWishes(updatedWishes);\r\n        localStorage.setItem('wishes', JSON.stringify(updatedWishes));\r\n    }, [wishes]);\r\n\r\n    const loadReminders = useCallback(() => {\r\n        const storedReminders = JSON.parse(localStorage.getItem('reminders') || '[]');\r\n        setReminders(storedReminders);\r\n    }, []);\r\n\r\n    const addReminder = useCallback((newReminder) => {\r\n        const updatedReminders = [...reminders, { ...newReminder, id: Date.now(), fulfilled: false }];\r\n        setReminders(updatedReminders);\r\n        localStorage.setItem('reminders', JSON.stringify(updatedReminders));\r\n    }, [reminders]);\r\n\r\n    const fulfillReminder = useCallback((id) => {\r\n        const updatedReminders = reminders.map(reminder => \r\n            reminder.id === id ? { ...reminder, fulfilled: true } : reminder\r\n        );\r\n        setReminders(updatedReminders);\r\n        localStorage.setItem('reminders', JSON.stringify(updatedReminders));\r\n    }, [reminders]);\r\n\r\n    const deleteReminder = useCallback((id) => {\r\n        const updatedReminders = reminders.filter(reminder => reminder.id !== id);\r\n        setReminders(updatedReminders);\r\n        localStorage.setItem('reminders', JSON.stringify(updatedReminders));\r\n    }, [reminders]);\r\n\r\n    const loadUserLists = useCallback(() => {\r\n        const storedLists = JSON.parse(localStorage.getItem('userLists') || '[]');\r\n        setUserLists(storedLists);\r\n    }, []);\r\n\r\n    const addUserList = useCallback((newList) => {\r\n        const updatedLists = [...userLists, { ...newList, id: Date.now() }];\r\n        setUserLists(updatedLists);\r\n        localStorage.setItem('userLists', JSON.stringify(updatedLists));\r\n    }, [userLists]);\r\n\r\n    return (\r\n        <AppContext.Provider value={{ \r\n            wishes, loadWishes, addWish, \r\n            reminders, loadReminders, addReminder, fulfillReminder, deleteReminder,\r\n            userLists, loadUserLists, addUserList \r\n        }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useApp = () => useContext(AppContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}